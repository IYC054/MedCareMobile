import 'package:flutter/material.dart';
import 'package:medcaremobile/UI/Profile/HistoryPage.dart';
import 'package:medcaremobile/UI/Profile/PatientFilePage.dart';
import 'package:medcaremobile/UI/Profile/PersonalProfile.dart';
import 'package:medcaremobile/UI/Profile/PrivacyPolicyPage.dart';
import 'package:medcaremobile/UI/Profile/ProfileAppointment.dart';
import 'package:medcaremobile/UI/Profile/ProfilePage.dart';
import 'package:medcaremobile/UI/Profile/RegulationsPage.dart';
import 'package:medcaremobile/UI/Profile/TermsOfServicePage.dart';

import 'package:medcaremobile/UI/Profile/FAQPage.dart';
import 'package:medcaremobile/services/FirestoreService.dart';
import 'package:medcaremobile/services/StorageService.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:share_plus/share_plus.dart';
import '../Home/Home.dart';

class Profilepage extends StatefulWidget {
  const Profilepage({super.key});

  @override
  State<Profilepage> createState() => _ProfilepageState();
}

class _ProfilepageState extends State<Profilepage> {
  Map<String, dynamic>? userdata;
  bool isLoading = true;
  bool? isLoggedIn;
  //xu ly logout
  Future<void> _loadUserData() async {
    final user = await StorageService.getUser();
    if (user != null) {
      print("USER PROFILE $user");
      setState(() {
        userdata = user;
        isLoading = false;
      });
    }
  }

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    _loadUserData();
  }

  Future<void> checkLoginStatus() async {
    String? token =
        await StorageService.getToken(); // üîπ D√πng `await` ƒë·ªÉ l·∫•y gi√° tr·ªã th·ª±c
    setState(() {
      isLoggedIn = token != null && token.isNotEmpty;
    });
  }

  void _logout(BuildContext context) async {
    await StorageService.clearToken(); // ƒê·∫£m b·∫£o clear token tr∆∞·ªõc
    checkLoginStatus(); // G·ªçi l·∫°i checkLoginStatus ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("ƒêƒÉng xu·∫•t th√†nh c√¥ng!")),
    );

    // ƒêi·ªÅu h∆∞·ªõng v·ªÅ m√†n h√¨nh ch√≠nh
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => Home()),
    );
  }

  void _callCustomerService() async {
    const phoneNumber = "tel:19002115";
    if (await canLaunchUrl(Uri.parse(phoneNumber))) {
      await launchUrl(Uri.parse(phoneNumber));
    } else {
      debugPrint("Kh√¥ng th·ªÉ m·ªü tr√¨nh quay s·ªë.");
    }
  }

  void _shareApp() {
    Share.share(
        "H√£y th·ª≠ ngay ·ª©ng d·ª•ng n√†y: https://play.google.com/store/apps/details?id=vn.com.medpro");
  }

  void _openAppReview() async {
    const url =
        "https://play.google.com/store/apps/details?id=vn.com.medpro"; // Thay b·∫±ng link ·ª©ng d·ª•ng c·ªßa b·∫°n
    if (await canLaunchUrl(Uri.parse(url))) {
      await launchUrl(Uri.parse(url), mode: LaunchMode.externalApplication);
    } else {
      debugPrint("Kh√¥ng th·ªÉ m·ªü trang ƒë√°nh gi√°.");
    }
  }

  //show diaglog confirm logout
  Future<void> _showLogoutDialog(BuildContext context) async {
    return showDialog<void>(
      context: context,
      barrierDismissible: false, // Ng∆∞·ªùi d√πng ph·∫£i ch·ªçn Yes/No
      builder: (BuildContext context) {
        return AlertDialog(
          icon: Icon(
            Icons.logout_outlined,
            color: Colors.red,
          ),
          title: Text(
            'X√°c nh·∫≠n ƒëƒÉng xu·∫•t',
            style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red),
          ),
          content: Text('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t kh√¥ng?'),
          actions: <Widget>[
            TextButton(
              child: Text('H·ªßy', style: TextStyle(color: Colors.grey)),
              onPressed: () {
                Navigator.of(context).pop(); // ƒê√≥ng Dialog
              },
            ),
            TextButton(
              child: Text('ƒêƒÉng xu·∫•t', style: TextStyle(color: Colors.red)),
              onPressed: () {
                Navigator.of(context).pop(); // ƒê√≥ng Dialog
                _logout(context); // G·ªçi h√†m x·ª≠ l√Ω ƒëƒÉng xu·∫•t
                FirestoreService.logout(); //ƒêƒÉng xu·∫•t Firestore
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    print(userdata?["name"]);
    // print(userdata?["role"][0]['name']);
    return Scaffold(
      backgroundColor: Colors.blue,
      appBar: AppBar(
        backgroundColor: Colors.blue,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () {},
        ),
      ),
      body: isLoading
          ? Center(
              child:
                  CircularProgressIndicator(), // Hi·ªÉn th·ªã loading khi ƒëang t·∫£i d·ªØ li·ªáu
            )
          : Column(
              children: [
                const CircleAvatar(
                  radius: 50,
                  backgroundColor: Colors.white,
                  child: Icon(Icons.person, size: 50, color: Colors.grey),
                ),
                Text(
                  userdata?["name"],
                  style: TextStyle(color: Colors.white, fontSize: 20),
                ),
                Text(
                  userdata?["phone"],
                  style: TextStyle(color: Colors.white, fontSize: 16),
                ),
                const SizedBox(height: 40),
                Expanded(
                  child: Container(
                    padding: const EdgeInsets.all(16),
                    decoration: const BoxDecoration(
                      color: Colors.white,
                      borderRadius:
                          BorderRadius.vertical(top: Radius.circular(20)),
                    ),
                    child: ListView(
                      children: [
                        const Text(
                          "ƒêi·ªÅu kho·∫£n v√† quy ƒë·ªãnh",
                          style: TextStyle(
                            color: Colors.black,
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 20),
                        buildListTile(
                            Icons.verified_user, "Quy ƒë·ªãnh s·ª≠ d·ª•ng", context),
                        buildListTile(
                            Icons.lock, "Ch√≠nh s√°ch b·∫£o m·∫≠t", context),
                        buildListTile(
                            Icons.description, "ƒêi·ªÅu kho·∫£n d·ªãch v·ª•", context),
                        Divider(
                            color: const Color.fromARGB(255, 209, 209, 209),
                            thickness: 3),
                        buildListTile(Icons.person_outlined,
                            "Th√¥ng tin c√° nh√¢n", context),
                        buildListTile(
                            Icons.personal_injury, "L·ªãch kh√°m", context),
                        if (userdata!['role'][0]['name'] == "DOCTOR")
                          buildListTile(
                              Icons.calendar_month, "L·ªãch h·∫πn c·ªßa b√°c sƒ©", context),
                        buildListTile(
                            Icons.payment, "L·ªãch s·ª≠ thanh to√°n", context),
                        Divider(
                            color: const Color.fromARGB(255, 209, 209, 209),
                            thickness: 3),
                        buildListTile(
                            Icons.phone, "T·ªïng ƒë√†i CSKH 19002115", context),
                        Divider(
                            color: const Color.fromARGB(255, 209, 209, 209),
                            thickness: 3),
                        buildListTile(
                            Icons.thumb_up, "ƒê√°nh gi√° ·ª©ng d·ª•ng", context),
                        buildListTile(Icons.share, "Chia s·∫ª ·ª©ng d·ª•ng", context),
                        Divider(
                            color: const Color.fromARGB(255, 209, 209, 209),
                            thickness: 3),
                        buildListTile(
                            Icons.help, "M·ªôt s·ªë c√¢u h·ªèi th∆∞·ªùng g·∫∑p", context),
                        buildListTile(
                            Icons.logout_outlined, "ƒêƒÉng xu·∫•t", context),
                      ],
                    ),
                  ),
                ),
              ],
            ),
    );
  }

  ListTile buildListTile(IconData icon, String title, BuildContext context) {
    Color iconColor = Colors.blue; // M·∫∑c ƒë·ªãnh l√† m√†u blue

    if (title == "Quy ƒë·ªãnh s·ª≠ d·ª•ng") {
      iconColor = Colors.green;
    } else if (title == "L·ªãch s·ª≠ thanh to√°n") {
      iconColor = Colors.green;
    } else if (title == "L·ªãch kh√°m") {
      iconColor = Colors.red;
    } else if (title == "Ch√≠nh s√°ch b·∫£o m·∫≠t") {
      iconColor = Colors.orange;
    } else if (title == "ƒêi·ªÅu kho·∫£n d·ªãch v·ª•") {
      iconColor = Colors.indigoAccent;
    } else if (title == "Th√¥ng tin c√° nh√¢n") {
      iconColor = Colors.purple;
    } else if (title == "T·ªïng ƒë√†i CSKH 19002115") {
      iconColor = Colors.grey;
    } else if (title == "ƒê√°nh gi√° ·ª©ng d·ª•ng") {
      iconColor = Colors.amber;
    } else if (title == "M·ªôt s·ªë c√¢u h·ªèi th∆∞·ªùng g·∫∑p") {
      iconColor = Colors.black;
    } else if (title == "ƒêƒÉng xu·∫•t") {
      iconColor = Colors.redAccent;
    }
    return ListTile(
      leading: Icon(
        icon,
        color: iconColor,
      ),
      title: Text(title),
      trailing: (title != "T·ªïng ƒë√†i CSKH 19002115" &&
              title != "ƒê√°nh gi√° ·ª©ng d·ª•ng" &&
              title != "Chia s·∫ª ·ª©ng d·ª•ng")
          ? const Icon(Icons.arrow_forward_ios, size: 16)
          : null,
      onTap: () async {
        if (title == "T·ªïng ƒë√†i CSKH 19002115") {
          _callCustomerService();
        } else if (title == "ƒê√°nh gi√° ·ª©ng d·ª•ng") {
          _openAppReview();
        } else if (title == "Chia s·∫ª ·ª©ng d·ª•ng") {
          _shareApp();
        } else if (title == "Quy ƒë·ªãnh s·ª≠ d·ª•ng") {
          Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => const RegulationsPage(
                      title: "Quy ƒë·ªãnh s·ª≠ d·ª•ng",
                    )),
          );
        } else if (title == "Ch√≠nh s√°ch b·∫£o m·∫≠t") {
          Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => const PrivacyPolicyPage(
                      title: "Ch√≠nh s√°ch b·∫£o m·∫≠t",
                    )),
          );
        } else if (title == "L·ªãch kh√°m") {
          Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => const PatientFilePage(
                      title: "L·ªãch kh√°m",
                    )),
          );
        } else if (title == "L·ªãch h·∫πn c·ªßa b√°c sƒ©") {
          Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => const Profileappointment(
                      title: "L·ªãch h·∫πn c·ªßa b√°c sƒ©",
                    )),
          );
        } else if (title == "L·ªãch s·ª≠ thanh to√°n") {
          Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => const HistoryPage(
                      title: "L·ªãch s·ª≠ thanh to√°n",
                    )),
          );
        } else if (title == "ƒêi·ªÅu kho·∫£n d·ªãch v·ª•") {
          Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => const TermsOfServicePage(
                      title: "ƒêi·ªÅu kho·∫£n d·ªãch v·ª•",
                    )),
          );
        } else if (title == "M·ªôt s·ªë c√¢u h·ªèi th∆∞·ªùng g·∫∑p") {
          Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => const FAQPage(
                      title: "M·ªôt s·ªë c√¢u h·ªèi th∆∞·ªùng g·∫∑p",
                    )),
          );
        } else if (title == "Th√¥ng tin c√° nh√¢n") {
          Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => const PersonalProfile(
                      title: "Th√¥ng tin c√° nh√¢n",
                    )),
          );
        } else if (title == "ƒêƒÉng xu·∫•t") {
          _showLogoutDialog(context); // G·ªçi dialog x√°c nh·∫≠n
        }
      },
    );
  }
}
